/*
 * Open Source Software published under the Apache Licence, Version 2.0.
 */

import org.gradle.internal.os.OperatingSystem

plugins {
    id "base"
    id "com.github.ben-manes.versions" version "0.39.0"
    id "net.researchgate.release" version "2.8.1"
    id "org.sonarqube" version "3.3"
    id "com.github.spotbugs" version "4.7.1" apply false
}

ext {
    operatingSystem = OperatingSystem.current()
}

allprojects {
    group 'io.github.vocabhunter'
}

wrapper {
    description 'Setup the Gradle wrapper'
    gradleVersion = '7.0.2'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'

    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
        testImplementation 'org.mockito:mockito-junit-jupiter:3.11.1'
        runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
    }

    test {
        useJUnitPlatform()
    }

    pmd {
        toolVersion = '6.34.0'
        ruleSetFiles = files("$rootProject.projectDir/config/pmd/ruleset.xml")
        ruleSets = []
    }

    checkstyle {
        toolVersion = '8.42'
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }

    spotbugs {
        toolVersion = '4.2.3'
        effort = 'max'
        reportLevel = 'medium'
        excludeFilter = file("$rootProject.projectDir/config/spotbugs/excludeFilter.xml")
    }

    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    jacoco {
        toolVersion = '0.8.6'
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco/report.xml")
        }
    }

    [compileJava, compileTestJava].each { task ->
        task.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
    }
}
