import org.apache.tools.ant.filters.ReplaceTokens

/*
 * Open Source Software published under the Apache Licence, Version 2.0.
 */

ext {
    publishedVersion = project.version
    bundlerScript = file('bin/build-package.sh')
    applicationLibraryPath = file("${rootProject.project('gui').buildDir}/libraries")
    javafxModulePath = file("${rootProject.project('gui').buildDir}/javafx-modules")
    mainJar = project(':gui').jar.outputs.files[0].name
    bundlePath = file("${buildDir}/bundle")
    fileAssociations = file("${buildDir}/resources/main/file-associations.properties")
    extraBundlerArguments = []
    if (operatingSystem.isMacOsX()) {
        packageType = 'dmg'
        appIcon = file('icons/mac/VocabHunter.icns')
        sessionIcon = file('icons/mac/VocabHunterSession.icns')
        extraBundlerArguments = ['--mac-sign']
    } else if (operatingSystem.isLinux()) {
        packageType = 'deb'
        appIcon = file('icons/App1024.png')
        sessionIcon = file('icons/Doc1024.png')
    } else if (operatingSystem.isWindows()) {
        packageType = 'exe'
        appIcon = file('icons/windows/VocabHunter.ico')
        sessionIcon = file('icons/windows/VocabHunterSession.ico')
        bundlerScript = file('bin/build-package.bat')
        generatedInnoSetupFile = file("${buildDir}/resources/main/application.iss")
        windowsExecutable = file("${bundlePath}/VocabHunter/VocabHunter.exe")
        bundleContent = file("${bundlePath}/VocabHunter/*")
        // Locations for the DLL workaround
        windowsDllDirectory = file('C:\\Windows\\System32')
        windowsDllMSVCP140 = file("${windowsDllDirectory}/MSVCP140.dll")
        windowsDllVCRUNTIME140 = file("${windowsDllDirectory}/VCRUNTIME140.dll")
    }
    if (publishedVersion.endsWith('-SNAPSHOT')) {
        publishedVersion = '1.0.0'
    }
}

task recreateIconMacApp(type: Exec) {
    description 'Regenerate the Mac application icon'
    commandLine 'sh', file('bin/mac-icon.sh'), file('icons/App1024.png'), file('icons/mac'), 'VocabHunter'
}

task recreateIconMacSession(type: Exec) {
    description 'Regenerate the Mac session file icon'
    commandLine 'sh', file('bin/mac-icon.sh'), file('icons/Doc1024.png'), file('icons/mac'), 'VocabHunterSession'
}

task recreateIconWindowsApp(type: Exec) {
    description 'Regenerate the Windows application icon'
    commandLine 'sh', file('bin/windows-icon.sh'), file('icons/App1024.png'), file('icons/windows'), 'VocabHunter'
}

task recreateIconWindowsSession(type: Exec) {
    description 'Regenerate the Windows session file icon'
    commandLine 'sh', file('bin/windows-icon.sh'), file('icons/Doc1024.png'), file('icons/windows'), 'VocabHunterSession'
}

task recreateIcons(dependsOn: [recreateIconMacApp, recreateIconMacSession, recreateIconWindowsApp, recreateIconWindowsSession]) {
    description 'Regenerate all the application bundle icons'
}

processResources {
    filesMatching('file-associations.properties') {
        filter ReplaceTokens, tokens: [
            'vocabhunter.session.icon': sessionIcon.toString()
        ]
    }
}

task createBundle(type: Exec, dependsOn: [processResources]) {
    description 'Build the installable bundle'
    if (operatingSystem.isWindows()) {
        commandLine 'cmd', '/c',
            bundlerScript,
            packageType,
            "${javafxModulePath}",
            applicationLibraryPath,
            bundlePath,
            mainJar,
            publishedVersion,
            appIcon
    } else {
        commandLine = ['sh',
            bundlerScript,
            "jpackage",
            packageType,
            "${javafxModulePath}",
            applicationLibraryPath,
            bundlePath,
            mainJar,
            publishedVersion,
            fileAssociations,
            appIcon,
            *extraBundlerArguments]
    }
}

createBundle.dependsOn ':gui:copyDependencies', ':gui:copyJavafxModules'

if (operatingSystem.isWindows()) {
    processResources {
        filesMatching('application.iss') {
            filter ReplaceTokens, tokens: [
                'bundle.version': publishedVersion,
                'executable.location': windowsExecutable.toString(),
                'bundle.content': bundleContent.toString()
            ]
        }
    }

    task completeInnoSetup(dependsOn: processResources) {
        doLast {
            copy {
                from 'icons/windows'
                into "${bundlePath}/VocabHunter"
                include 'VocabHunterSession.ico'
            }
            // Copy files for DLL workaround
            copy {
                from windowsDllMSVCP140
                from windowsDllVCRUNTIME140
                into "${bundlePath}/VocabHunter"
            }
            println("Inno Setup file: ${generatedInnoSetupFile}")
        }
    }

    createBundle.finalizedBy completeInnoSetup
}
